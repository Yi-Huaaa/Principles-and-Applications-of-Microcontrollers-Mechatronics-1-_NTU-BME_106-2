
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000013e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000766  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069f  00000000  00000000  000009ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000246  00000000  00000000  00001059  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a9  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ee  00000000  00000000  0000167d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000176b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define F_CPU 2000000UL
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	60 97       	sbiw	r28, 0x10	; 16
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	 DDRB=0xff; //0xFF=0b11111111
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	84 b9       	out	0x04, r24	; 4
	 DDRD=0x0f;  //pinmode
  ae:	9f e0       	ldi	r25, 0x0F	; 15
  b0:	9a b9       	out	0x0a, r25	; 10
	 PORTB=0Xff;
  b2:	85 b9       	out	0x05, r24	; 5
	 unsigned char array[4][4]={{0b01111000,0b00011001,0b11111001,0b01000000},{0b00000000,0b00010010,0b00100100,0b00001000},{0b00010000,0b00000010,0b00110000,0b00000000},{0b01000110,0b01000000,0b00000110,0b00001110}};
  b4:	80 e1       	ldi	r24, 0x10	; 16
  b6:	e0 e0       	ldi	r30, 0x00	; 0
  b8:	f1 e0       	ldi	r31, 0x01	; 1
  ba:	de 01       	movw	r26, r28
  bc:	11 96       	adiw	r26, 0x01	; 1
  be:	01 90       	ld	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	8a 95       	dec	r24
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x28>
	unsigned char one = 1;
	while (1){
		//PORTB=0Xff;
		for(int i = 0; i < 4; i++)//as i = 0, shift left 0, at this time is 1110
		{
			PORTD = (~(one << i)); //one shift left　要寫進　portD　的前四個 bit, as i = 1 become 1101 and so on
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	8e 01       	movw	r16, r28
  cc:	0f 5f       	subi	r16, 0xFF	; 255
  ce:	1f 4f       	sbci	r17, 0xFF	; 255
	 unsigned char array[4][4]={{0b01111000,0b00011001,0b11111001,0b01000000},{0b00000000,0b00010010,0b00100100,0b00001000},{0b00010000,0b00000010,0b00110000,0b00000000},{0b01000110,0b01000000,0b00000110,0b00001110}};
	
	unsigned char one = 1;
	while (1){
		//PORTB=0Xff;
		for(int i = 0; i < 4; i++)//as i = 0, shift left 0, at this time is 1110
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b0 e0       	ldi	r27, 0x00	; 0
		{
			PORTD = (~(one << i)); //one shift left　要寫進　portD　的前四個 bit, as i = 1 become 1101 and so on
  d4:	cb 01       	movw	r24, r22
  d6:	0a 2e       	mov	r0, r26
  d8:	02 c0       	rjmp	.+4      	; 0xde <main+0x48>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <main+0x44>
  e2:	80 95       	com	r24
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	f8 01       	movw	r30, r16
  e8:	24 e0       	ldi	r18, 0x04	; 4
  ea:	30 e0       	ldi	r19, 0x00	; 0
			for(int j = 0; j < 4; j++)
			{
				if((~PIND) & (one << (4 + j)))//輸出電流用 因為是左邊四個bit　所以要加四
  ec:	89 b1       	in	r24, 0x09	; 9
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	80 95       	com	r24
  f2:	90 95       	com	r25
  f4:	ab 01       	movw	r20, r22
  f6:	02 2e       	mov	r0, r18
  f8:	02 c0       	rjmp	.+4      	; 0xfe <main+0x68>
  fa:	44 0f       	add	r20, r20
  fc:	55 1f       	adc	r21, r21
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <main+0x64>
 102:	84 23       	and	r24, r20
 104:	95 23       	and	r25, r21
 106:	89 2b       	or	r24, r25
 108:	59 f0       	breq	.+22     	; 0x120 <main+0x8a>
				{
					PORTB = array[i][j];
 10a:	80 81       	ld	r24, Z
 10c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	4f e3       	ldi	r20, 0x3F	; 63
 110:	8d e0       	ldi	r24, 0x0D	; 13
 112:	93 e0       	ldi	r25, 0x03	; 3
 114:	41 50       	subi	r20, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x7e>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x88>
 11e:	00 00       	nop
 120:	2f 5f       	subi	r18, 0xFF	; 255
 122:	3f 4f       	sbci	r19, 0xFF	; 255
 124:	31 96       	adiw	r30, 0x01	; 1
	while (1){
		//PORTB=0Xff;
		for(int i = 0; i < 4; i++)//as i = 0, shift left 0, at this time is 1110
		{
			PORTD = (~(one << i)); //one shift left　要寫進　portD　的前四個 bit, as i = 1 become 1101 and so on
			for(int j = 0; j < 4; j++)
 126:	28 30       	cpi	r18, 0x08	; 8
 128:	31 05       	cpc	r19, r1
 12a:	01 f7       	brne	.-64     	; 0xec <main+0x56>
	 unsigned char array[4][4]={{0b01111000,0b00011001,0b11111001,0b01000000},{0b00000000,0b00010010,0b00100100,0b00001000},{0b00010000,0b00000010,0b00110000,0b00000000},{0b01000110,0b01000000,0b00000110,0b00001110}};
	
	unsigned char one = 1;
	while (1){
		//PORTB=0Xff;
		for(int i = 0; i < 4; i++)//as i = 0, shift left 0, at this time is 1110
 12c:	11 96       	adiw	r26, 0x01	; 1
 12e:	0c 5f       	subi	r16, 0xFC	; 252
 130:	1f 4f       	sbci	r17, 0xFF	; 255
 132:	a4 30       	cpi	r26, 0x04	; 4
 134:	b1 05       	cpc	r27, r1
 136:	71 f6       	brne	.-100    	; 0xd4 <main+0x3e>
 138:	c8 cf       	rjmp	.-112    	; 0xca <main+0x34>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
