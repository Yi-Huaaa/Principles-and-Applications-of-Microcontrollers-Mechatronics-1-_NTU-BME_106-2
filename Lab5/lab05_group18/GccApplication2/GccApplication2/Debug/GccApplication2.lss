
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067c  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027d  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034f  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000141b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB=0xFF; //0xFF=0b11111111
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	DDRD=0x0;  //pinmode
  84:	1a b8       	out	0x0a, r1	; 10
	DDRC=0x0;
  86:	17 b8       	out	0x07, r1	; 7
	PORTC=0xFF; //digitalwrrite
  88:	88 b9       	out	0x08, r24	; 8
	PORTD=0xFF;
  8a:	8b b9       	out	0x0b, r24	; 11
	PORTB=0Xff;
  8c:	85 b9       	out	0x05, r24	; 5
	
	
	while (1){
		
		if( ~PIND & 0b00000001){
			PORTB = 0b11111001;//1
  8e:	79 ef       	ldi	r23, 0xF9	; 249
		}
		 if( ~PIND & 0b00000010){
			PORTB = 0b10010010;//2
  90:	62 e9       	ldi	r22, 0x92	; 146
		}
		 if( ~PIND & 0b00000100){
			PORTB = 0b10010001;//3
  92:	51 e9       	ldi	r21, 0x91	; 145
		}
		 if( ~PIND & 0b00001000){
			PORTB = 0b11001001;//4
  94:	49 ec       	ldi	r20, 0xC9	; 201
		}
		 if( ~PIND & 0b00010000){
			PORTB = 0b10000101;//5
  96:	35 e8       	ldi	r19, 0x85	; 133
		}
		 if( ~PIND & 0b00100000){
			PORTB = 0b10000100;//6
  98:	24 e8       	ldi	r18, 0x84	; 132
		}
		 if( ~PIND & 0b01000000){
			PORTB = 0b11110001;//7
  9a:	91 ef       	ldi	r25, 0xF1	; 241
		}
		 if( !(PINC & 0b00001000)){
			PORTB = 0b00000000;//8
		}
		 if( !(PINC & 0b00010000)){
			PORTB = 0b00000001;//9   10000001
  9c:	81 e0       	ldi	r24, 0x01	; 1
		}
		 if( !(PINC & 0b00100000)){
			PORTB = 0b00100000;//0
  9e:	e0 e2       	ldi	r30, 0x20	; 32
	
	
	
	while (1){
		
		if( ~PIND & 0b00000001){
  a0:	48 9b       	sbis	0x09, 0	; 9
			PORTB = 0b11111001;//1
  a2:	75 b9       	out	0x05, r23	; 5
		}
		 if( ~PIND & 0b00000010){
  a4:	49 9b       	sbis	0x09, 1	; 9
			PORTB = 0b10010010;//2
  a6:	65 b9       	out	0x05, r22	; 5
		}
		 if( ~PIND & 0b00000100){
  a8:	4a 9b       	sbis	0x09, 2	; 9
			PORTB = 0b10010001;//3
  aa:	55 b9       	out	0x05, r21	; 5
		}
		 if( ~PIND & 0b00001000){
  ac:	4b 9b       	sbis	0x09, 3	; 9
			PORTB = 0b11001001;//4
  ae:	45 b9       	out	0x05, r20	; 5
		}
		 if( ~PIND & 0b00010000){
  b0:	4c 9b       	sbis	0x09, 4	; 9
			PORTB = 0b10000101;//5
  b2:	35 b9       	out	0x05, r19	; 5
		}
		 if( ~PIND & 0b00100000){
  b4:	4d 9b       	sbis	0x09, 5	; 9
			PORTB = 0b10000100;//6
  b6:	25 b9       	out	0x05, r18	; 5
		}
		 if( ~PIND & 0b01000000){
  b8:	4e 9b       	sbis	0x09, 6	; 9
			PORTB = 0b11110001;//7
  ba:	95 b9       	out	0x05, r25	; 5
		}
		 if( !(PINC & 0b00001000)){
  bc:	33 9b       	sbis	0x06, 3	; 6
			PORTB = 0b00000000;//8
  be:	15 b8       	out	0x05, r1	; 5
		}
		 if( !(PINC & 0b00010000)){
  c0:	34 9b       	sbis	0x06, 4	; 6
			PORTB = 0b00000001;//9   10000001
  c2:	85 b9       	out	0x05, r24	; 5
		}
		 if( !(PINC & 0b00100000)){
  c4:	35 99       	sbic	0x06, 5	; 6
  c6:	ec cf       	rjmp	.-40     	; 0xa0 <main+0x20>
			PORTB = 0b00100000;//0
  c8:	e5 b9       	out	0x05, r30	; 5
  ca:	ea cf       	rjmp	.-44     	; 0xa0 <main+0x20>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
